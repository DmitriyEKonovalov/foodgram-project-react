name: foodgram main  workflow

on:
  push:
    branches: [ master ]

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install dependencies
      run: | 
        # обновление pip
        python -m pip install --upgrade pip 
        # установка flake8 и его плагинов
        pip install flake8 pep8-naming flake8-broken-line flake8-return
        # установка зависимостей
        pip install -r ./backend/requirements.txt 

  # Сразу после них добавьте новую задачу: деплой приложения
  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        # Проверка доступности репозитория Docker Hub для workflow
        uses: actions/checkout@v2 
      - name: Set up Docker Buildx
        # Вызов сборщика контейнеров docker
        uses: docker/setup-buildx-action@v1 
      - name: Login to Docker 
        # Запуск скрипта авторизации на Docker Hub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push backend to Docker Hub
        # Пуш образа бэкенда в Docker Hub
        uses: docker/build-push-action@v2 
        with:
          context: .
          file: ./backend/Dockerfile
          push: true
          tags: dmitriykonovalov/infra_backend:latest

  deploy:
      runs-on: ubuntu-latest
      needs: build_and_push_to_docker_hub
      steps:
        - name: executing remote ssh commands to deploy
          uses: appleboy/ssh-action@master
          with:
            host: ${{ secrets.HOST }}
            username: ${{ secrets.USER }}
            key: ${{ secrets.SSH_KEY }}
            passphrase: ${{ secrets.PASSPHRASE }}
            script: |
              touch .env
              echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
              echo DB_NAME=${{ secrets.DB_NAME }} >> .env
              echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
              echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
              echo DB_HOST=${{ secrets.DB_HOST }} >> .env
              echo DB_PORT=${{ secrets.DB_PORT }} >> .env
              echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
              sudo docker pull ${{ secrets.DOCKER_USERNAME }}/infra_backend:latest
              sudo docker pull ${{ secrets.DOCKER_USERNAME }}/infra_frontend:latest
              
              sudo docker-compose up -d --build

              sudo docker-compose exec -T web python ./backend/manage.py makemigrations --noinput
              sudo docker-compose exec -T web python ./backend/manage.py migrate --noinput
              sudo docker-compose exec -T web python ./backend/manage.py collectstatic --noinput
              
              sudo docker-compose exec -T web bash \
              DJANGO_SUPERUSER_USERNAME=admin \
              DJANGO_SUPERUSER_PASSWORD=0adminuser \
              DJANGO_SUPERUSER_EMAIL="admin@admin.admin" \
              python ./backend/manage.py createsuperuser --noinput
